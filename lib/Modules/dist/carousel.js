// Generated by CoffeeScript 2.0.0-beta4
var TocasCarousel;

TocasCarousel = (function() {
  class TocasCarousel {
    // items: [
    //     {
    //         image      : 'www.example.com/test.png'
    //         header     : 'Header'
    //         description: 'Description.'
    //     }
    // ]
    $init({$this, $delay, $module}) {
      var $control, $first, $indicators, $item, $items, $last;
      $control = $selector('<div>').addClass('controls');
      $indicators = $selector('<div>').addClass('indicators');
      $items = $selector('<div>').addClass('items');
      $control.html("<a href=\"#!\" class=\"left\"><i class=\"angle left icon\"></i></a>\n<a href=\"#!\" class=\"right\"><i class=\"angle right icon\"></i></a>");
      $item = $this.find(':scope > .item');
      $item.each(function(_, i) {
        return $indicators.append($selector('<div>').addClass('item' + (i === 0 ? ' active' : '')).get());
      });
      $items.append($item);
      $first = $items.find('.item:first-child');
      $last = $items.find('.item:last-child');
      
      //$firstDuplicated = $first.clone().addClass 'duplicated'
      //$lastDuplicated  = $last.clone().addClass  'duplicated'
      //$firstDuplicated.appendTo $items
      //$lastDuplicated.prependTo $items
      $first.addClass('active');
      $this.html('').append($items).append($control).append($indicators);
      $this.find('.controls > .left').on('click', function() {
        return $module.prototype._previous({$this, $delay, $module});
      });
      $this.find('.controls > .right').on('click', function() {
        return $module.prototype._next({$this, $delay, $module});
      });
      return $this.data('index', 0);
    }

    async _slide({$this, $delay}, direction) {
      var $current, $next, movingDirection;
      if ($this.data('sliding') === true) {
        return;
      }
      $this.data('sliding', true);
      movingDirection = direction === 'next' ? 'left' : 'right';
      $current = $this.find('.items > .item.active');
      if (direction === 'next') {
        $next = $current.next();
        $next = $next.length === 0 ? $this.find('.items > .item:first-child') : $next;
      } else {
        $next = $current.prev();
        $next = $next.length === 0 ? $this.find('.items > .item:last-child') : $next;
      }
      $next.addClass(direction);
      await $delay(30);
      $current.addClass(`moving ${movingDirection}`);
      $next.addClass(`moving ${movingDirection}`);
      return $current.one('transitionend', function() {
        $next.removeClass(`moving ${movingDirection} ${direction}`);
        $next.addClass('active');
        $current.removeClass(`active moving ${movingDirection} ${direction}`);
        return $this.data('sliding', false);
      });
    }

    _next({$this, $delay, $module}) {
      return $module.prototype._slide({$this, $delay}, 'next');
    }

    _previous({$this, $delay, $module}) {
      return $module.prototype._slide({$this, $delay}, 'previous');
    }

    _pause() {}

    _jump() {}

  };

  TocasCarousel.prototype.$name = 'carousel';

  TocasCarousel.prototype.$data = {
    left: '.controls .left',
    right: '.controls .right'
  };

  TocasCarousel.prototype.$options = {
    interval: 2000, // 幻燈片換到下一張的毫秒相隔時間。
    autoplay: true, // 是否要自動播放。
    covered: false,
    indicator: {
      style: 'round',
      navigable: true
    },
    control: {
      icon: {
        left: 'angle left',
        right: 'angle right'
      }
    },
    onChange: function() {}, // 當幻燈片變更時所呼叫的函式。
    onCycle: function() {}, // 當幻燈片完成一個循環時所呼叫的函式。
    items: []
  };

  TocasCarousel.prototype.$methods = {
    // 開始播放幻燈片。
    play: function({$this}) {},
    // 暫停幻燈片。
    pause: function({$this}) {},
    // 切換下一個幻燈片。
    next: function({$this}) {},
    // 切換上一個幻燈片。
    previous: function({$this}) {},
    // 跳到指定的幻燈片。
    jump: function({$this}, to) {}
  };

  return TocasCarousel;

})();

new ts(TocasCarousel);
