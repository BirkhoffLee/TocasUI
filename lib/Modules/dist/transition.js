// Generated by CoffeeScript 2.0.0-beta4
var TocasTransition;

TocasTransition = (function() {
  class TocasTransition {
    _init({$this, $delay, $module}) {
      var customer;
      // 初始化動畫佇列。
      $this.data('animationQueue', []);
      // 初始化動畫索引。
      $this.data('animationIndex', 0);
      // 建立消費者事件，會在每次動畫結束後，從動畫佇列中找出下一個該執行的動畫，執行後將其從佇列中移除。
      customer = async function() {
        var index, looping, next, previousData, queue;
        // 如果沒有 `animated` 則不是 Tocas 動畫，略過本次動畫監聽事件。
        if ($this.attr('data-animating') !== 'true') {
          return;
        }
        // 移除上個動畫的樣式。
        $this.removeAttr('data-animating');
        // 移除上個動畫名稱。
        $this.removeAttr('data-animation');
        // 取得現有動畫佇列。
        queue = $this.data('animationQueue');
        // 取得上個動畫的資料。
        previousData = queue[0];
        // 呼叫上個動畫的完成回呼函式。
        previousData.onComplete.call($this.get());
        looping = $this.data('animationLooping') === true;
        // 將這個動畫從佇列中移除。
        if (!looping) {
          queue.shift();
          // 更新動畫佇列。
          $this.data('animationQueue', queue);
        }
        // 如果佇列是空的則離開。
        if (queue.length === 0) {
          return;
        }
        await $delay();
        if (!looping) {
          next = queue[0];
        } else {
          index = $this.data('animationIndex');
          index = queue[index + 1] !== void 0 ? index + 1 : 0;
          next = queue[index];
          $this.data('animationIndex', index);
        }
        // 執行佇列中的下一個動畫。
        return $module.prototype._animate({$this, $delay, $module}, next);
      };
      // 設置動畫消費者事件。
      $this.on('animationend', customer);
      // 表示初始化終了。
      return $this.data('animationInitialized', true);
    }

    // 播放動畫。
    async _animate({$this, $delay, $module}, data) {
      if (data.animation === 'hide') {
        $this.attr('data-animating-hidden', 'true');
        $this.attr('data-animating', 'true');
        await $delay(data.duration);
        $this.trigger('animationend');
        return;
      } else if (data.animation === 'show') {
        $this.removeAttr('data-animating-hidden');
        $this.attr('data-animating', 'true');
        await $delay(data.duration);
        $this.trigger('animationend');
        return;
      }
      // 設置本次動畫的速度。
      $this.css('animation-duration', `${data.duration}ms`);
      // 決定本次動畫名稱。
      $this.attr('data-animation', data.animation);
      // 然後等一下，播放動畫。
      await $delay();
      return $this.attr('data-animating', 'true');
    }

    // 將新的動畫推入佇列中，如果佇列裡只有這個動畫就立即執行。
    _push({$this, $delay, $module}, animation, duration, onComplete) {
      var data, queue;
      // 如果元素還沒初始化動畫設置，則先初始化。
      if ($this.data('animationInitialized') === void 0) {
        $module.prototype._init({$this, $delay, $module});
      }
      // 如果動畫時間是函式，就表示使用者設置的是回呼函式而不是時間。
      if (typeof duration === 'function') {
        onComplete = duration;
        duration = 1000;
      }
      if (duration === null) {
        duration = 1000;
      }
      // 初始化一個空的完成函式，如果沒有的話。
      if (onComplete === null || onComplete === void 0) {
        onComplete = function() {};
      }
      // 準備好這個動畫的資料。
      data = {
        animation: animation,
        duration: duration,
        onComplete: onComplete
      };
      // 取得現有動畫佇列，並且將這個新的動畫推入佇列中。
      queue = $this.data('animationQueue');
      queue.push(data);
      $this.data('animationQueue', queue);
      // 如果動畫佇列裡只有這個動畫，那麼就立即執行。
      if (queue.length === 1) {
        return $module.prototype._animate({$this, $delay, $module}, data);
      }
    }

    $opts({$this, $delay, $module}, options) {
      options = Object.assign({
        duration: 1000,
        interval: 200,
        reverse: false,
        onComplete: function() {}
      }, options);
      if (options.group === void 0) {
        $module.prototype._push({$this, $delay, $module}, options.animation, options.duration, options.onComplete);
        return ts.fn;
      }
      if (options.reverse === true) {
        $this.find(options.group).toArray().reverse().forEach(function(element, index) {
          var $self;
          $self = $selector(element);
          return (async function($self) {
            await $delay(options.interval * index);
            return $module.prototype._push({
              $this: $self,
              $delay,
              $module
            }, options.animation, options.duration, options.onComplete);
          })($self);
        });
      } else {
        $this.find(options.group).toArray().forEach(function(element, index) {
          var $self;
          $self = $selector(element);
          return (async function($self) {
            await $delay(options.interval * index);
            return $module.prototype._push({
              $this: $self,
              $delay,
              $module
            }, options.animation, options.duration, options.onComplete);
          })($self);
        });
      }
      return ts.fn;
    }

  };

  TocasTransition.prototype.$name = 'transition';

  TocasTransition.prototype.$methods = {
    'bounce': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'bounce', duration, onComplete);
      return ts.fn;
    },
    'flash': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'flash', duration, onComplete);
      return ts.fn;
    },
    'pulse': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'pulse', duration, onComplete);
      return ts.fn;
    },
    'rubber band': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'rubber band', duration, onComplete);
      return ts.fn;
    },
    'shake': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'shake', duration, onComplete);
      return ts.fn;
    },
    'head shake': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'head shake', duration, onComplete);
      return ts.fn;
    },
    'swing': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'swing', duration, onComplete);
      return ts.fn;
    },
    'tada': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'tada', duration, onComplete);
      return ts.fn;
    },
    'wobble': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'wobble', duration, onComplete);
      return ts.fn;
    },
    'jello': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'jello', duration, onComplete);
      return ts.fn;
    },
    'bounce in': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'bounce in', duration, onComplete);
      return ts.fn;
    },
    'bounce in down': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'bounce in down', duration, onComplete);
      return ts.fn;
    },
    'bounce in left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'bounce in left', duration, onComplete);
      return ts.fn;
    },
    'bounce in right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'bounce in right', duration, onComplete);
      return ts.fn;
    },
    'bounce in up': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'bounce in up', duration, onComplete);
      return ts.fn;
    },
    'bounce out': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'bounce out', duration, onComplete);
      return ts.fn;
    },
    'bounce down': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'bounce down', duration, onComplete);
      return ts.fn;
    },
    'bounce out left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'bounce out left', duration, onComplete);
      return ts.fn;
    },
    'bounce out right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'bounce out right', duration, onComplete);
      return ts.fn;
    },
    'bounce out up': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'bounce out up', duration, onComplete);
      return ts.fn;
    },
    'fade in': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade in', duration, onComplete);
      return ts.fn;
    },
    'fade in down': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade in down', duration, onComplete);
      return ts.fn;
    },
    'fade in down heavily': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade in down heavily', duration, onComplete);
      return ts.fn;
    },
    'fade in left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade in left', duration, onComplete);
      return ts.fn;
    },
    'fade in left heavily': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade in left heavily', duration, onComplete);
      return ts.fn;
    },
    'fade in right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade in right', duration, onComplete);
      return ts.fn;
    },
    'fade in right heavily': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade in right heavily', duration, onComplete);
      return ts.fn;
    },
    'fade in up': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade in up', duration, onComplete);
      return ts.fn;
    },
    'fade in up heavily': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade in up heavily', duration, onComplete);
      return ts.fn;
    },
    'fade out down': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade out down', duration, onComplete);
      return ts.fn;
    },
    'fade out down heavily': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade out down heavily', duration, onComplete);
      return ts.fn;
    },
    'fade out left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade out left', duration, onComplete);
      return ts.fn;
    },
    'fade out left heavily': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade out left heavily', duration, onComplete);
      return ts.fn;
    },
    'fade out right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade out right', duration, onComplete);
      return ts.fn;
    },
    'fade out right heavily': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade out right heavily', duration, onComplete);
      return ts.fn;
    },
    'fade out up': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade out up', duration, onComplete);
      return ts.fn;
    },
    'fade out up heavily': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'fade out up heavily', duration, onComplete);
      return ts.fn;
    },
    'flip': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'flip', duration, onComplete);
      return ts.fn;
    },
    'flip in x': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'flip in x', duration, onComplete);
      return ts.fn;
    },
    'flip in y': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'flip in y', duration, onComplete);
      return ts.fn;
    },
    'flip out x': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'flip out x', duration, onComplete);
      return ts.fn;
    },
    'flip out y': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'flip out y', duration, onComplete);
      return ts.fn;
    },
    'light speed in': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'light speed in', duration, onComplete);
      return ts.fn;
    },
    'light speed out': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'light speed out', duration, onComplete);
      return ts.fn;
    },
    'rotate in': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'rotate in', duration, onComplete);
      return ts.fn;
    },
    'rotate in down left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'rotate in down left', duration, onComplete);
      return ts.fn;
    },
    'rotate in down right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'rotate in down right', duration, onComplete);
      return ts.fn;
    },
    'rotate in up left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'rotate in up left', duration, onComplete);
      return ts.fn;
    },
    'rotate in up right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'rotate in up right', duration, onComplete);
      return ts.fn;
    },
    'rotate out': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'rotate out', duration, onComplete);
      return ts.fn;
    },
    'rotate out down left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'rotate out down left', duration, onComplete);
      return ts.fn;
    },
    'rotate out down right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'rotate out down right', duration, onComplete);
      return ts.fn;
    },
    'rotate out up left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'rotate out up left', duration, onComplete);
      return ts.fn;
    },
    'rotate out up right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'rotate out up right', duration, onComplete);
      return ts.fn;
    },
    'hinge': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'hinge', duration, onComplete);
      return ts.fn;
    },
    'roll in': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'roll in', duration, onComplete);
      return ts.fn;
    },
    'roll out': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'roll out', duration, onComplete);
      return ts.fn;
    },
    'zoom in': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'zoom in', duration, onComplete);
      return ts.fn;
    },
    'zoom in down': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'zoom in down', duration, onComplete);
      return ts.fn;
    },
    'zoom in left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'zoom in left', duration, onComplete);
      return ts.fn;
    },
    'zoom in up': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'zoom in up', duration, onComplete);
      return ts.fn;
    },
    'zoom in right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'zoom in right', duration, onComplete);
      return ts.fn;
    },
    'zoom out': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'zoom out', duration, onComplete);
      return ts.fn;
    },
    'zoom out down': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'zoom out down', duration, onComplete);
      return ts.fn;
    },
    'zoom out left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'zoom out left', duration, onComplete);
      return ts.fn;
    },
    'zoom out right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'zoom out right', duration, onComplete);
      return ts.fn;
    },
    'zoom out up': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'zoom out up', duration, onComplete);
      return ts.fn;
    },
    'slide in down': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'slide in down', duration, onComplete);
      return ts.fn;
    },
    'slide in left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'slide in left', duration, onComplete);
      return ts.fn;
    },
    'slide in right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'slide in right', duration, onComplete);
      return ts.fn;
    },
    'slide in up': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'slide in up', duration, onComplete);
      return ts.fn;
    },
    'slide out down': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'slide out down', duration, onComplete);
      return ts.fn;
    },
    'slide out left': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'slide out left', duration, onComplete);
      return ts.fn;
    },
    'slide out right': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'slide out right', duration, onComplete);
      return ts.fn;
    },
    'slide out up': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'slide out up', duration, onComplete);
      return ts.fn;
    },
    'toggle': function() {},
    'show': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'show', duration, onComplete);
      return ts.fn;
    },
    'hide': function({$this, $delay, $module}, duration, onComplete) {
      $module.prototype._push({$this, $delay, $module}, 'hide', duration, onComplete);
      return ts.fn;
    },
    'delay': function() {},
    'set looping': function({$this, $delay, $module}, options) {
      if (options.group != null) {
        $this.find(options.group).data('animationLooping', true);
      } else {
        $this.data('animationLooping', true);
      }
      return ts.fn;
    },
    'remove looping': function({$this, $delay, $module}, options) {
      if (options.group != null) {
        $this.find(options.group).data('animationLooping', false).removeData('animationIndex');
      } else {
        $this.data('animationLooping', false).removeData('animationIndex');
      }
      return ts.fn;
    },
    'stop': function() {},
    'stop all': function() {}
  };

  return TocasTransition;

})();

new ts(TocasTransition);
